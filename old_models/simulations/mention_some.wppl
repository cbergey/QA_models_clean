var filterWorld = function(world) {
  return _.object(reduce(function(value, memo) {
    var hasNewspaper = world[value]['hasNewspaper'];
    return hasNewspaper ? memo.concat([[value, world[value]]]) : memo;
  }, [], _.keys(world)));
}

var pickAllNewspaperCafes = function(world) {
  var filt = filterWorld(world);
  return _.isEmpty(filt) ? ['none'] : _.keys(filt);
}

var pickClosestNewspaperCafe = function(world) {
  var filt = filterWorld(world);
  if(_.isEmpty(filt)) {
    return ['none'];
  } else {
    var minDist = _.min(_.pluck(_.values(filt), 'distance'));
    return sort(filter(function(v) {return filt[v]['distance'] == minDist},
		       _.keys(filt)));
  }
};

var KL = function(erpTrue, erpApprox){
  var values = erpTrue.support([]);
  return sum(map(
    function(value){
      var scoreP = erpTrue.score(value);
      var scoreQ = erpApprox.score(value);
      var probP = Math.exp(scoreP);
      return probP == 0.0 ? 0.0 : probP * (scoreP - scoreQ);
    }, values));
};

///

//   ---------------
// | World knowledge |
//   ---------------

var distances = [1,3]

var cafes = ['cafe1', 'cafe2', 'cafe3', 'cafe4']

var touristContext = "I'm new in town.";
var businesspersonContext = "I'm trying to set up a newspaper distribution business.";

var isCafeList = function(l){
  var predicate = function(s) {return _.contains(cafes, s);};
  return all(predicate, l);
};

var worldPrior = function(){
  return {
    'cafe1' : {'distance' : uniformDraw(distances), 'hasNewspaper' : flip(.5)},
    'cafe2' : {'distance' : uniformDraw(distances), 'hasNewspaper' : flip(.5)},
    'cafe3' : {'distance' : uniformDraw(distances), 'hasNewspaper' : flip(.5)},
    'cafe4' : {'distance' : uniformDraw(distances), 'hasNewspaper' : flip(.5)}
  }
}

//  -------------------
// | Question knowledge |
//  -------------------

var newspaperQuestion = "Where can one buy an Italian newspaper?";

// projects from a world to the relevant properties for the desired answer
var newspaperQuestionMeaning = function(world){return pickAllNewspaperCafes(world);};

var questions = [newspaperQuestion]

var questionPrior = function(){
  return uniformDraw(questions);
};

//  -----------------
// | Answer knowledge |
//  -----------------

// (truncated) geometric distribution
var answerPrior = function(){
  return flip(.8) ? [] : sort([uniformDraw(cafes)].concat(answerPrior()));
};

var cafeAnswerMeaning = function(cafeList){
  return function(world){
    var predicate = function(cafe) {return world[cafe]['hasNewspaper'];};
    return all(predicate, cafeList);
  };
};

var noneMeaning = function() {
  return function(world){
    var predicate = function(cafe) {return !world[cafe]['hasNewspaper'];};
    return all(predicate, cafes);
  };
};

//   -----------
// | Interpreter |
//   -----------

var meaning = function(utterance){
  return (isCafeList(utterance) ? cafeAnswerMeaning(utterance) :
         (_.isEqual(utterance, [])) ? noneMeaning() : 
         (utterance === newspaperQuestion) ? newspaperQuestionMeaning :
         console.error('unknown utterance!', utterance));
};

var interpreter = cache(function(answer){
  return Infer({method: 'enumerate'}, function(){
    var world = worldPrior();
    var answerMeaning = meaning(answer);
    condition(answerMeaning(world));
    return world;
  });
});

//  ------
// | QUDs |
//  ------

var qudAll = function(world){return pickAllNewspaperCafes(world);};
var qudClosest = function(world){return pickClosestNewspaperCafe(world);};

var qudPrior = function(context){
  var p = ((context === businesspersonContext) ? 1 :
           (context === touristContext) ? 0 :
           console.error('unknown context'));
  return (flip(p) ? "qudAll" : "qudClosest");
};

var nameToQUD = function(qudName){
  return (qudName === "qudClosest" ? qudClosest :
          qudName === "qudAll" ? qudAll :
          qudName === newspaperQuestion ? newspaperQuestionMeaning :
          console.error('unknown qud name', qudName));
};

//  -------
// | Models |
//  -------

var getConsistentWorlds = function(answer, qudName) {
  var qud = nameToQUD(qudName);
  return Infer({method: 'enumerate'}, function(){
    var inferredWorld = sample(interpreter(answer));
    return qud(inferredWorld);
  });
};

var getProjectedWorldPrior = function(qudName) {
  var qud = nameToQUD(qudName);
  return Infer({method: 'enumerate'}, function(){
    return qud(worldPrior());
  });
};

var explicitAnswerer = cache(function(question, trueWorld, rationality) {
  var qud = nameToQUD(question);
  return Infer({method: 'enumerate', maxExecutions: 1}, function(){
    var answer = answerPrior();
    var consistentWorldDist = getConsistentWorlds(answer, question);
    factor(consistentWorldDist.score(qud(trueWorld)) * rationality);
    return answer;
  });
});  

var explicitQuestioner = cache(function(qudName, rationality) {
  return Infer({method: 'enumerate'}, function(){
    var question = questionPrior();
    var prior = getProjectedWorldPrior(qudName);
    var informationGainDist = Infer({method: 'enumerate'}, function(){
      var trueWorld = worldPrior();
      var possibleAnswer = sample(explicitAnswerer(question, trueWorld, rationality));
      var posterior = getConsistentWorlds(possibleAnswer, qudName);
      return KL(posterior, prior);
    });
    factor(expectation(informationGainDist) * rationality);
    return question;
  });
});

var inferQUD = cache(function(context, question, rationality){
  return Infer({method: 'enumerate'}, function() {
    var qudName = qudPrior(context);
    var q_erp = explicitQuestioner(qudName, rationality);
    observe(q_erp, question);
    return qudName;
  });
});

var pragmaticAnswerer = cache(function(context, question, trueWorld, rationality){
  var qudPosterior = inferQUD(context, question, rationality);
  return Infer({method: 'enumerate', maxExecutions: 500}, function(){
    var qudName = sample(qudPosterior);
    var answer = answerPrior();
    var consistentWorldDist = getConsistentWorlds(answer, qudName);
    factor(consistentWorldDist.score(nameToQUD(qudName)(trueWorld)) * rationality);
    return answer;
  });
});

var world = {'cafe1' : {'distance' : 3, 'hasNewspaper' : false},
             'cafe2' : {'distance' : 1, 'hasNewspaper' :true},
             'cafe3' : {'distance' : 3, 'hasNewspaper' :true},
             'cafe4' : {'distance' : 3, 'hasNewspaper' :true}}

console.log(businesspersonContext, newspaperQuestion);
console.log(pragmaticAnswerer(businesspersonContext, newspaperQuestion, world,10));

console.log(touristContext, newspaperQuestion);
console.log(pragmaticAnswerer(touristContext, newspaperQuestion, world, 10));
