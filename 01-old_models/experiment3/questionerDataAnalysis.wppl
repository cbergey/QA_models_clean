// Fix some configuration options
var config = {
  'Qrationality' : argv.Qrationality,
  'Arationality' : argv.Arationality,
  'answerCost' : argv.answerCost
};

var runAnalysis = function() {
  // don't condition on 1st 6 'practice' trials
  var f = function(v) {
    var state = JSON.parse(v['gridState']);
    return (_.toInteger(v['trialNum']) > 6
    	    && (state['safe'].length + state['unsafe'].length) > 0);
  };
  
  var questionerData = filter(f, qa.readCSV('../qa/questionFromMongo_qualitative.csv'));

  return Infer({method: 'enumerate', model: function() {
    var Arationality = config.Arationality;
    var Qrationality = config.Qrationality;
    var answerCost = config.answerCost;

    var model = SpatialModel(Qrationality, Arationality, answerCost);
    var questioner = model.questioner;
    var questionerType = flip() ? 'explicit' : 'pragmatic';
    globalStore.score = 0;
    
    mapData({data: questionerData}, function(response) {
      var rawState = JSON.parse(response['gridState']);
      var state = {'safe' : sort(rawState['safe']),
		   'unsafe' : sort(rawState['unsafe'])};
      var goal = response['goal'] == 'columns' ? ['1', '2', '3'] : ['A', 'B', 'C'];
      var prediction = Infer({method: 'enumerate'}, function() {
	var guess = flip(.1);
	return guess ? sample(Categorical({vs: ['is_A1_safe?', 'is_A2_safe?', 'is_A3_safe?', 'is_B1_safe?', 'is_B2_safe?', 'is_B3_safe?', 'is_C1_safe?', 'is_C2_safe?', 'is_C3_safe?']})) : sample(questioner(questionerType, goal, state));
      });
      var score = prediction.score('is_' + response['question'] + '_safe?');
      globalStore.score += score;
      factor(_.isFinite(score) ? score : -10);
    });

    console.log({
      questionerType,
      Qrationality,
      Arationality,
      answerCost,
      likelihood: globalStore.score
    });
    return;
  }});
};

var runAIS = function(questionerType) {
  // don't condition on 1st 6 'practice' trials
  var f = function(v) {
    var state = JSON.parse(v['gridState']);
    return (_.toInteger(v['trialNum']) > 6
	    && (state['safe'].length + state['unsafe'].length) > 0);
  };
  
  var questionerData = filter(f, qa.readCSV('../qa/questionFromMongo_qualitative.csv'));
  var AISconfig = {steps: 100};
  return AIS(function() {
    var Arationality = uniformDrift({a:0, b: 100, width: 10})//config.Arationality;
    var Qrationality = uniformDrift({a:0, b: 100, width: 10})//config.Qrationality;
    var answerCost = uniformDrift({a: 0, b: 5, width: 1})//config.answerCost;
    
    console.log(Qrationality, Arationality, answerCost);
    var model = SpatialModel(Qrationality, Arationality, answerCost);
    var questioner = model.questioner;

    globalStore.score = 0;
    
    mapData({data: questionerData}, function(response) {      
      var rawState = JSON.parse(response['gridState']);
      var state = {'safe' : sort(rawState['safe']),
		   'unsafe' : sort(rawState['unsafe'])};
      var goal = response['goal'] == 'columns' ? ['1', '2', '3'] : ['A', 'B', 'C'];
      var prediction = Infer({method: 'enumerate'}, function() {
	var guess = flip(.05);
	return guess ? sample(Categorical({vs: ['is_A1_safe?', 'is_A2_safe?', 'is_A3_safe?', 'is_B1_safe?', 'is_B2_safe?', 'is_B3_safe?', 'is_C1_safe?', 'is_C2_safe?', 'is_C3_safe?']})) : sample(questioner(questionerType, goal, state));
      });
      var score = prediction.score('is_' + response['question'] + '_safe?');
      globalStore.score += score;
      factor(_.isFinite(score) ? score : -10);
    });
    console.log({
      likelihood: globalStore.score
    });
    return;
  }, AISconfig);
};

var findBlockedParams = function(questionerType) {
  // only look at blocked trials (for Fig in paper)
  var f = function(v) {
    var state = JSON.parse(v['gridState']);
    return v['trialType'] == 'blocked' & _.toInteger(v['questionNumber']) > 1;
  };

  var questionerData = filter(f, qa.readCSV('../qa/questionFromMongo_qualitative.csv'));
  console.log('# data points', questionerData.length);
  var MCMCconfig = {method: 'MCMC'};
  return Infer(MCMCconfig, function() {
    var Arationality = uniform(1, 20)//config.Arationality;
    var Qrationality = uniform(1, 20)//config.Qrationality;
    var answerCost = uniform(0, 3)//config.answerCost;
    
    console.log(Arationality, Qrationality, answerCost);
    var model = SpatialModel(Qrationality, Arationality, answerCost);
    var questioner = model.questioner;

    globalStore.score = 0;
    
    mapData({data: questionerData}, function(response) {      
      var rawState = JSON.parse(response['gridState']);
      var state = {'safe' : sort(rawState['safe']),
		   'unsafe' : sort(rawState['unsafe'])};
      var goal = response['goal'] == 'columns' ? ['1', '2', '3'] : ['A', 'B', 'C'];
      var prediction = questioner(questionerType, goal, state);
      var score = prediction.score('is_' + response['question'] + '_safe?');
      globalStore.score += score;
      factor(_.isFinite(score) ? score : -10);
    });
    console.log('score', globalStore.score);
    return {
      questionerType,
      Qrationality,
      Arationality,
      answerCost,
      likelihood: globalStore.score
    };
  });
};

if(argv.blockedOnly) {
  findBlockedParams(argv.questionerType)
} else if(argv.questionerType) {
  runAIS(argv.questionerType)
} else  {
  runAnalysis()
}
