// Run as:
// webppl AIS_answerer.wppl --require ../../qa -- --modelType <prag_unif>

var questionToLabel = function(question) {
  return qa.butLast(question).split("Is")[1].toLowerCase();
};

var labelToQuestion = function(label) {
  return 'whereIs' + label[0].toUpperCase() + label.slice(1) + '?';
}

var data = qa.readCSV("../../data/BayesianAnalysisInput.csv");
var types = ["branching", "overlapping", "equivocal"];
var domains = ["artifact", "animals", "places", "plants"];
var items = qa.cartesianProductOf([types, domains]);

var modelAnalysis = function() {
  // Sample params
  var recursion = argv.modelType.split('_')[0];
  var salience = argv.modelType.split('_')[1];
  var ArationalityRaw = uniformDrift({a: 0, b: 20, width: 5}),
      Arationality = Number.parseFloat(ArationalityRaw.toFixed(2));
  var QrationalityRaw = uniformDrift({a: 0, b: 20, width: 5}),
      Qrationality = Number.parseFloat(QrationalityRaw.toFixed(2));
  var wRaw = salience === 'unif' ? 0 : uniformDrift({a: 0, b: 1, width: .1}),
      w = Number.parseFloat(wRaw.toFixed(2));

  // Run model and condition on data
  var score = sum(map(function(item) {
    var model = QAmodel(item[0], item[1], Qrationality, Arationality, w);
    var questioner = model.questioner;
    return sum(map(function(qud) {
      var itemData = qa.getSubset(data, {type: item[0], domain: item[1], goal: qud});
      var Q = questioner(recursion, qud, 'fast');
      return sum(map(function(dataRow) {
       	return Q.score("whereIs" + qa.capitalize(dataRow.question) + "?");
      }, itemData));
    }, model.qudSpace));
  }, items));
  factor(score)
};

console.log(argv.modelType, AIS(modelAnalysis, {steps: 10000}));
