// Run as:
// webppl BayesianDataAnalysisAnswerer.wppl --require ../qa -- --modelType prag_emp

var questionToLabel = function(question) {
  return qa.butLast(question).split("Is")[1].toLowerCase();
};

var data = qa.readCSV("../../data/BayesianAnalysisInput.csv");
console.log("loaded data");

var types = ["branching", "overlapping", "equivocal"];
var domains = ["artifact", "animals", "places", "plants"];
var items = qa.cartesianProductOf([types, domains]);

var modelAnalysis = function() {
  // Sample params
  var modelType = argv.modelType;
  var ArationalityRaw = uniformDrift({a: 0, b: 40, width: 2}),
      Arationality = Number.parseFloat(ArationalityRaw.toFixed(2));
  var QrationalityRaw = uniformDrift({a:  0, b: 40, width: 2}),
      Qrationality = Number.parseFloat(QrationalityRaw.toFixed(2));
  var wRaw = modelType.split('_')[1] === 'unif' ? 0 : uniformDrift({a : 0, b: 1, width: .1}),
      w = Number.parseFloat(wRaw.toFixed(2));

  var recursion = modelType.split('_')[0];
  globalStore.predictives = {};

  // Run model and condition on data
  var score = sum(map(function(item) {
    var model = QAmodel(item[0], item[1], Qrationality, Arationality, w);
    var runAnswererModel = model.runAnswererModel;
    return sum(map(function(question) {
      var itemData = qa.getSubset(data, {type:item[0], domain: item[1],
  					 question: questionToLabel(question)});
      var answererERP = runAnswererModel(question, recursion, 'fast');
      // Store predictions
      foreach(answererERP.support(),function(s){
      	var key = [questionToLabel(question), item[0], item[1], s, 
      	    	   Arationality, Qrationality, w, modelType].join(",");
      	var newPair = _.zipObject([key], [Math.exp(answererERP.score(s))]);
      	globalStore.predictives = extend(globalStore.predictives, newPair);
      });

      return sum(map(function(dataRow) {
	var localScore = answererERP.score(dataRow.answer);
	return localScore;
      }, itemData));
    }, model.questionSpace));
  }, items));
  
  console.log([Arationality,Qrationality,w,modelType]);
  console.log(score);
  factor(score);

  var paramsKey = [Arationality, Qrationality, w, modelType].join(',');
  return {predictive: globalStore.predictives,
	  params : _.zipObject([paramsKey], [score])};
};

var MCMCconfig = {method: 'MCMC', samples: 500, lag : 12, burn : 4000};
var outputERP = Infer(MCMCconfig, modelAnalysis);

// console.log('inference complete... printing');

qa.bayesianErpWriter(outputERP, "bdaOutput/answerer_modelComparison_" + argv.modelType);
