//  -----------
// | utilities |
//  ----------

var butLast = function(xs){
  return xs.slice(0, xs.length-1);
};

var KL = function(dist1, dist2){
  var values = dist1.support();
  return sum(map(function(value){
    var scoreP = dist1.score(value);
    var scoreQ = dist2.score(value);
    var probP = Math.exp(scoreP);
    var probQ = Math.exp(scoreQ);
    return (probP == 0.0 ? 0.0 :
            probQ == 0.0 ? 1000000:
            probP * (scoreP - scoreQ));
  }, values));
};

var SumSquares = function(dist1, dist2){
  var values = dist1.support();
  return sum(map(function(value){
    var scoreP = dist1.score(value);
    var scoreQ = dist2.score(value);
    var probP = Math.exp(scoreP);
    var probQ = Math.exp(scoreQ);
    return ((scoreP - scoreQ)^2);
  }, values));
};

// var questionerUtilFct = myDF[0].questionerUtilFct == "KL" ? KL : SumSquares;

var powerset = function(set) {
  if (set.length == 0) {
    return [[]];
  } else {
    var rest = powerset(set.slice(1));
    return map(function(element) {
      return [set[0]].concat(element);
    }, rest).concat(rest);
  }
};

var params = {
  respondantAlpha : 0.0001,
  questionerAlpha : 3,
  relevanceBeta: 0, // beta=1 for only action-utility
  costWeight: 0
};

var bakedGoods = ['raspPie', 'raspCake', 'lemonPie', 'lemonCake'];
var bakedGoodsMinimal = ['RP', 'LC', 'SC', 'AS'];

var setsOfBakedGoods = map(
  function(v){return v.join('+');},
  // add possibility to encode background knowledge of number k of available goods
  filter(function(x) {return x.length <= 4}, powerset(bakedGoods))
);

var pieCakeContextMinimal = {
  // worlds include all possible sub-sets of 0 < k < N pies and cakes
  worlds : bakedGoodsMinimal,

  // actions include ordering 1 pie/cake
  actions: bakedGoodsMinimal,

  // questions include yes/no question for each baked good
  questions: [
    // single item polar questions
    {type: 'polar-disjunct', queried: ['RP'], text: 'RP?'},
    {type: 'polar-disjunct', queried: ['LC'], text: 'LC?'},
    {type: 'polar-disjunct', queried: ['SC'], text: 'SC?'},
    {type: 'polar-disjunct', queried: ['AS'], text: 'AS?'},
    // all two-place disjunctions
    // {type: 'polar-disjunct', queried: ['RP', 'LC'], text: 'RPorLC?'},
    // {type: 'polar-disjunct', queried: ['RP', 'SC'], text: 'RPorSC?'},
    // {type: 'polar-disjunct', queried: ['RP', 'AS'], text: 'RPorAS?'},
    // {type: 'polar-disjunct', queried: ['LC', 'SC'], text: 'LCorSC?'},
    // {type: 'polar-disjunct', queried: ['LC', 'AS'], text: 'LCorAS?'},
    // {type: 'polar-disjunct', queried: ['SC', 'AS'], text: 'SCorAS?'},
    // wh-question
    {type: 'wh', queried: bakedGoodsMinimal, text: 'which?'},
  ],

  // assume questioner is uncertain but answerer has Delta on true world (e.g. shopkeep)
  questionerBeliefs: Categorical({vs: bakedGoodsMinimal}),
  respondantBeliefs: Delta({v: 'RP'}),

  // raspberry pie is #1 preference (U=5), lemon cake is #2 preference (U=4).
  // otherwise U=1 if whatever you order is in stock and 0 if it's not in stock
  decisionProblem: function(w, a) {
    return _.includes(w, a) ? 1 : 0.0000001;
  },
  meaning: function(world, question, response) {
    if(response == '') {
      // assume silence has null meaning
      return true;
    }
    if(question.type == 'polar-disjunct') {
      return (response == 'yes' ? _.includes(question.queried, world) :
              response == 'no' ?  (! _.includes(question.queried, world)) : 0);
    } else if(question.type == 'wh') {
      return world == response;
    } else {
      return console.error('question type not yet supported: ' + question.type);
    }
  },
  // R0 chooses among responses licensed by the question
  getLicensedResponses: function(question) {
    if(question.type == 'polar-disjunct') {
      return ['yes', 'no'];
    } else if(question.type == 'wh') {
      return bakedGoodsMinimal;
    } else {
      return console.error('question type not yet supported: ' + question.type);
    }
  }
};

// amended context with unbiased questioner beliefs and no preferences over any baked good
var pieCakeContextMinimalWithPreferences = extend(
  pieCakeContextMinimal,
  {
    // respondant knows true answer
    respondantBeliefs: Delta({v: 'lemonCake'}),
    // no preferences over baked goods
    questions: [
      // single item polar questions
      {type: 'polar-disjunct', queried: ['RP'], text: 'RP?'},
      {type: 'polar-disjunct', queried: ['LC'], text: 'LC?'},
      {type: 'polar-disjunct', queried: ['SC'], text: 'SC?'},
      {type: 'polar-disjunct', queried: ['AS'], text: 'AS?'},
      // all two-place disjunctions
      // {type: 'polar-disjunct', queried: ['RP', 'LC'], text: 'RPorLC?'},
      // {type: 'polar-disjunct', queried: ['RP', 'SC'], text: 'RPorSC?'},
      // {type: 'polar-disjunct', queried: ['RP', 'AS'], text: 'RPorAS?'},
      // {type: 'polar-disjunct', queried: ['LC', 'SC'], text: 'LCorSC?'},
      // {type: 'polar-disjunct', queried: ['LC', 'AS'], text: 'LCorAS?'},
      // {type: 'polar-disjunct', queried: ['SC', 'AS'], text: 'SCorAS?'},
      // wh-question
      {type: 'wh', queried: bakedGoodsMinimal, text: 'which?'},
    ],
    decisionProblem: function(w, a) {
      return _.includes(w, a) ? (a == 'RP' ? 5 : a == 'LC' ? 3 : 1) : 0.0000001;
    }
  }
)

// console.log(setsOfBakedGoods);
var pieCakeContext = {
  // worlds include all possible sub-sets of 0 < k < N pies and cakes
  worlds : setsOfBakedGoods,

  // actions include ordering 1 pie/cake
  actions: bakedGoods,

  // questions include yes/no question for each baked good
  questions: [
    {type: 'single-item', queried: ['lemonPie'], text: 'Lemon pie?'},
    {type: 'single-item', queried: ['lemonCake'], text: 'Lemon cake?'},
    {type: 'single-item', queried: ['raspPie'], text: 'Raspberry pie?'},
    {type: 'single-item', queried: ['raspCake'], text: 'Raspberry cake?'},
    {type: 'polar-disjunct', queried: ['lemonPie', 'raspPie', 'lemonPie+raspPie'], text: 'Pie?'},
    {type: 'polar-disjunct', queried: ['lemonCake', 'raspCake', 'lemonCake+raspCake'], text: 'Cake?'},
    {type: 'polar-disjunct', queried: ['lemonCake', 'raspCake', 'lemonPie', 'raspPie'], text: 'Anything?'},
    // MF additional disjunctions
    {type: 'polar-disjunct', queried: ['lemonPie', 'lemonCake', 'lemonPie+lemonCake'], text: 'Anything w/ lemon?'},
    {type: 'polar-disjunct', queried: ['raspPie', 'raspCake', 'raspPie+raspCake'], text: 'Anything w/ raspberry?'},
    {type: 'polar-disjunct', queried: ['lemonPie', 'raspCake', 'lemonPie+raspCake'], text: 'LP or RC?'},
    {type: 'polar-disjunct', queried: ['lemonCake', 'raspPie', 'lemonCake+raspPie'], text: 'RP or LC?'},
    {type: 'wh', queried: ['lemonCake', 'raspCake'], text: 'Which cakes?'},
    {type: 'wh', queried: ['lemonPie', 'raspPie'], text: 'Which pies?'},
    {type: 'wh', queried: ['lemonPie', 'lemonCake', 'raspPie', 'raspCake'], text: 'Which goods?'},
  ],

  // assume questioner is uncertain but answerer has Delta on true world (e.g. shopkeep)
  questionerBeliefs: Categorical({vs: setsOfBakedGoods}),
  respondantBeliefs: Delta({v: 'lemonCake'}),

  // raspberry pie is #1 preference (U=5), lemon cake is #2 preference (U=4).
  // otherwise U=1 if whatever you order is in stock and 0 if it's not in stock
  decisionProblem: function(w, a) {
    return _.includes(w, a) ? (a == 'raspPie' ? 5 : a == 'lemonCake' ? 3 : 1) : 0.0000001;
  },

  meaning: function(world, question, response) {
    if(response == '') {
      // assume silence has null meaning
      return true;
    }
     if(question.type == 'single-item') {
      // assume simplest meaning: 'yes' is true if any item in
      // question is available o.w. 'no' is true
      return (
        response == 'yes' ? _.intersection(world.split('+'), question.queried).length > 0 :
        response == 'no' ?  _.intersection(world.split('+'), question.queried).length == 0 :
        console.error('Not a valid response to question:', question, response));
    } else
    if(question.type == 'polar-disjunct') {
      // assume simplest meaning: 'yes' is true if any item in
      // question is available o.w. 'no' is true
      return (
        response == 'yes' ? _.intersection(world.split('+'), question.queried).length > 0 :
        response == 'no' ?  _.intersection(world.split('+'), question.queried).length == 0 :
        all(function(item) {
          return _.includes(world.split('+'), item);
        }, response.split('+')));
    } else if(question.type == 'wh') {
      // assume response is true when the shop contains every mentioned item
      return all(function(item) {
        return _.includes(world.split('+'), item);
      }, response.split('+'));
    } else {
      return console.error('question type not yet supported: ' + question.type);
    }
  },

  // R0 chooses among responses licensed by the question
  getLicensedResponses: function(question) {
    if(question.type == 'single-item') {
      // by definition polar questions require 'yes'/'no' answer
      return ['yes', 'no'];
    } else if(question.type == 'polar-disjunct') {
      // by definition polar questions require 'yes'/'no' answer
      var answers = ['yes', 'no'].concat(question.queried);
      return answers;
    } else if(question.type == 'wh') {
      // 'wh' questions allow you to say any set of queried items
      return map(function(v){return v.join('+');}, powerset(question.queried));
    } else {
      return console.error('question type not yet supported: ' + question.type);
    }
  }
};

// amended context with feature-based (additive) preferences
var pieCakeContextAdditivePreferences = extend(
  pieCakeContext,
  {
    // feature-additive preferences: pie = 3, cake = 2, rasp = 6, lemon = 4;
    decisionProblem: function(w, a) {
      return _.includes(w, a) ? (a == 'raspPie' ? 9 :
                                 a == 'raspCake' ? 8 :
                                 a == 'lemonPie' ? 7 :
                                 a == 'lemonCake' ? 6 : console.error('unknown action')
                                ) : 0.0000001;
    }
  }
)

// amended context with unbiased questioner beliefs and no preferences over any baked good
var pieCakeContextUnbiasedNoPref = extend(
  pieCakeContext,
  {
    // respondant knows true answer
    respondantBeliefs: Delta({v: 'lemonCake'}),
    // no preferences over baked goods
    decisionProblem: function(w, a) {
      return _.includes(w, a) ? 1 : 0.0000001;
    }
  }
)

// amended context with biased questioner beliefs and no preferences over any baked good
var pieCakeContextBiasedNoPref = extend(
  pieCakeContextUnbiasedNoPref,
  {
    // assume questioner is virtually certain that they have either raspberry pie
    // or lemon cake (but not both)
    questionerBeliefs: Categorical({
      vs: setsOfBakedGoods,
      ps: map(
        function (x) {
          return x == 'raspPie' ? 1000 : x == 'lemonCake' ? 1000 : 1
        },
        setsOfBakedGoods
      )
    })
  }
)

// response cost is proportional to length in words
var cost = function(response) {
  // MF: fixed error and added parameter
  return params.costWeight * (response.split('+').length - 1);
};

// weight possible actions proportional
var relevanceProjection = function(beliefs, context) {
  return Infer({method: 'enumerate'}, function() {
    var action = uniformDraw(context.actions);
    var world = sample(beliefs);
    var decisionProblem = context.decisionProblem;
    // console.log(world, action);
    // console.log(Math.log(decisionProblem(world, action)));
    factor(Math.log(decisionProblem(world, action)));
    return action;
  });
};

// gives updated beliefs about world state after hearing response to question
// based on a literal interpretation of the response
var updateBeliefs = function(beliefs, question, response, context) {
  var meaning = context.meaning;
  return Infer({method: 'enumerate'}, function() {
    var world = sample(beliefs);
    condition(meaning(world, question, response));
    return world;
  });
};

var questionUtility = function(utterance, beliefs, context) {
  // questioner wants to *maximize* expected payoff under decision problem
  var decisionProblem = context.decisionProblem;
  var actionPolicy = relevanceProjection(beliefs, context);
  var actionUtility = expectation(actionPolicy, function(action) {
    // weight possible actions proportional to reward
    return expectation(beliefs, function(world) {
      return decisionProblem(world, action);
    });
  });
  return actionUtility - cost(utterance);
};

var answerUtility = function(utterance, beliefs1, beliefs2, context) {
  // respondant wants to *minimize* KL b/w beliefs (bringing closer to own belief)
  var epistemicUtility = -KL(beliefs1, beliefs2);
  var actionUtility = -KL(relevanceProjection(beliefs1, context),
                          relevanceProjection(beliefs2, context));
  return ((1 - params.relevanceBeta) * epistemicUtility
          + params.relevanceBeta * actionUtility
          - cost(utterance));
};

var R0 = cache(function(question, context) {
  var getLicensedResponses = context.getLicensedResponses;
  return Infer({method: 'enumerate'}, function(){
    var response = uniformDraw(getLicensedResponses(question));
//     console.log(response);
    var ownBeliefs = context.respondantBeliefs;
    var otherBeliefs = updateBeliefs(context.questionerBeliefs, question, response, context);
//     console.log('updated beliefs', otherBeliefs);
    factor(params.respondantAlpha * answerUtility(response, ownBeliefs, otherBeliefs, context));
    return response;
  });
});

// gives updated beliefs about world state after hearing response to question
// based on a pragmatic interpretation of the response (as emitted by R0)
var updateBeliefsPragmatic = function(beliefs, question, response, context) {
  var meaning = context.meaning;
  return Infer({method: 'enumerate'}, function() {
    var world = sample(beliefs);
    var pragmaticResponse = R0(question, extend(context, {
      respondantBeliefs: Delta({v: world})
    }));
    observe(pragmaticResponse,response)
    return world;
  });
};

var Q1 = function(context) {
  return Infer({method: 'enumerate'}, function(){
    var question = uniformDraw(context.questions);
//     console.log('considering question', question.queried);
    var expectedUtility = expectation(context.questionerBeliefs, function(trueWorld) {
//       console.log('in possible world', trueWorld);
      var possibleResponses = R0(question, extend(context, {
        respondantBeliefs: Delta({v: trueWorld})
      }));
//       console.log('respondent: ', possibleResponses)
      return expectation(possibleResponses, function(response) {
//         console.log('considering response ', response );
        var currBeliefs = context.questionerBeliefs;
        var updatedBeliefs = updateBeliefsPragmatic(currBeliefs, question, response, context);
        return questionUtility(question.text, updatedBeliefs, context);
      });
    });
    factor(params.questionerAlpha * expectedUtility);
    return question.text;
  });
};


console.log(myDF);
var context =
    myDF[0].context == 'pieCakeContextMinimal' ? pieCakeContextMinimal :
    myDF[0].context == 'pieCakeContextMinimalWithPreferences' ? pieCakeContextMinimalWithPreferences :
    myDF[0].context == 'pieCakeContext' ? pieCakeContext :
    myDF[0].context == 'pieCakeContextAdditivePreferences' ? pieCakeContextAdditivePreferences :
    myDF[0].context == 'pieCakeContextBiasedNoPref' ? pieCakeContextBiasedNoPref :
    myDF[0].context == 'pieCakeContextUnbiasedNoPref' ? pieCakeContextUnbiasedNoPref :
    false
Q1(context)

// var context = pieCakeContext;
// var question = context.questions[5];
// var world = setsOfBakedGoods[10];
// console.log('world', world);
// console.log('question: ', question.text)
// var responses = context.getLicensedResponses
// console.log('all responses: ', responses(question))
// var response = responses(question)[1]
// console.log('response: ', response)
// var meaning = context.meaning
// console.log('truth value: ', meaning(world,question,response));

// Q1(context)
